#! /usr/bin/perl -T
use strict;
use warnings;
use YAML 'Dump';

use Try::Tiny;
use File::Slurp qw( slurp read_dir );
use Sys::Hostname 'hostname';
use Time::HiRes qw( tv_interval gettimeofday );

BEGIN { use lib ($ENV{OTTER_PERL_INC} || q{}) =~ m{([^:]+)}g }
use Otter::PerlVersion;
use Otter::Paths;
use Otter::WebConfig qw( host_svndir );
use Otter::WebNodes;
use WebVM::Util qw( gits_info pipefrom_with );


=head1 NAME

cgi-bin/server-meta - return info about webserver(s)

=head1 DESCRIPTION

This script emits in YAML the set of webserver hosts configured by the
webteam.  The purpose is to avoid relying on a stale copy of the list.

=cut

my $WEBDIR;
sub main {
    $WEBDIR = Otter::Paths->webdir;

    $ENV{PATH} = '/bin:/usr/bin';

    # Guard for overload
    my @load = (split /\s+/, slurp('/proc/loadavg'))[0,1,2]; # 1min, 5min, 15min
    if (grep { $_ >= 2 } @load) {
        print "Status: 503 Service Unavailable\nContent-type: text/plain\n\nToo busy\n";
        print Dump({ load => \@load });
        return 0;
    }

    # Generate details
    my $t0 = [ gettimeofday() ];
    my %out =
      (svn_config => (try { retro_config_extract() } catch { "ERR:$_" }),
       webnodes   => (try { webnodes() } catch { "ERR:$_" }),
       load => \@load,
       webdir => $WEBDIR,
       t0 => $^T,
      );

    if ($ENV{QUERY_STRING} eq 'detail') {
        $out{svn_repos} = { svn_info( host_svndir() ),
                            svn_info("$WEBDIR/utilities") },
        $out{instances} = servers_here();
        $out{git_repos} = gits_info($WEBDIR);
        $out{otters} = otters_detail($WEBDIR);
    }
    $out{t_run} = tv_interval($t0);

    print "Content-type: text/plain\n\n".
      "Give ?detail for extra info.\n";
    print Dump(\%out);

    return 0;
}


sub retro_config_extract {
    # This script first listed config_extract() with no fixup, and
    # webvm-hosts(1) used the data to drive rsync.
    #
    # Some fixup was necessary to reach all hosts.
    # Then the fixup moved.
    #
    # This is a backwards compatible translation, and the hashkey
    # 'svn_config' is a misnomer.
    my @srv = Otter::WebNodes->listnew_fixed;
    my @back = grep { ! $_->is_frontend } @srv;

    my @data = map {
        +{( hostname => $_->vhost,
            type => $_->type,
            read => $_->webtmpdir,
            write => $_->webdir,
            # above: original, below: extensions
            user => $_->user,
            vport => $_->vport,
            base_uri => $_->base_uri->as_string,
            provenance => $_->provenance,
          )}
    } @back;

    return \@data;
}

sub webnodes {
    my @srv = Otter::WebNodes->listnew_fixed;
    foreach my $o (@srv) { $o->fillin }
    return \@srv;
}


sub servers_here {
    # List procs
    my @ln = pipefrom_with('ps', '-eo', 'pid,ppid,user,cmd');

    foreach (@ln) { s/^\s+|\s+$//g }
    my @hdr = split /\s+/, shift @ln;
    my @proc = map {[ split /\s+/, $_, scalar @hdr ]} @ln;

    # Find Apache process groups in our style
    my $webvm_style =
      qr{
            ^/\S*/s?bin/(?:apache2|httpd)\b # webserver
            .*\s+(?:-f\s*)?                 # space or config mark
            (/[-_.a-zA-Z0-9/]+)             # capture directory part = webdir
            /ServerRoot/conf/httpd\.conf\b  # webvm-style config
    }x;
    my @webvm # [ pid, ppid, user, cmd, webdir ]
      = map { $_->[3] =~ $webvm_style ? ([ @$_, $1 ]) : () } @proc;

    # Exclude child processes
    my %pid;
    @pid{ map { $_->[0] } @webvm } = ();
    @webvm = grep { !exists $pid{ $_->[1] } } @webvm;

    # Get details
    @webvm = map { instance_detail(@$_) } @webvm;

    return \@webvm
}


sub instance_detail {
    my ($pid, undef, $user, $cmd, $webdir) = @_;

    # Look up port number
    my $fn = "$webdir/ServerRoot/conf/user/$user.conf";
    die "webvm.git config assumptions turned out to be broken" unless -f $fn;
    my @ucfg = slurp($fn);
    my @port = map { m{^Listen\s+(\d+)\s*$} ? ($1) : () } @ucfg;
    die "Can't get port for $user in $webdir" unless 1 == @port;

    my %out =
      (user => $user, pid => $pid, cmd => $cmd,
       hostname => hostname(),
       webdir => $webdir, port => $port[0]);
    $out{self} = 1 if $user eq getpwuid($<) && $webdir eq $WEBDIR;

    return \%out;
}


sub otters_detail {
    my ($webdir) = @_;

    my $cgi = "$webdir/cgi-bin/otter";
    my @num = read_dir($cgi);
    my %out;
    @out{@num} = map { -f "$cgi/$_/test" && -x _ } @num;

    return \%out;
}


sub svn_info {
    my ($dir) = @_;

    return ($dir => [ pipefrom_with(svnversion => $dir, { stderr => 1 }),
                      pipefrom_with(qw( svn info ), $dir, { stderr => 1 }) ]);
}


exit main();
