#! /usr/bin/perl

use strict;
use warnings;
use CGI 'escapeHTML';
use CGI::Carp 'fatalsToBrowser';

sub main {
    print make_page();
    return 0;
}

sub make_page {
    my @out;

    my $server = "$ENV{SERVER_NAME}:$ENV{SERVER_PORT}";
    $server =~ s{(\.internal)?\.sanger\.ac\.uk}{};

    my $webdir = $ENV{DOCUMENT_ROOT};
    $webdir =~ s{/htdocs/?$}{};

    my @weird;
    my %app; # key = appname, value = \@cfgs
    foreach my $appfn (read_dir("$webdir/apps")) {
        if (-f $appfn && $appfn =~ m{/([^/]+)\.conf$}) {
            my $app = $1;
            push @{ $app{$app} }, $appfn;
        } elsif (-d $appfn) {
            my ($app) = $appfn =~ m{/([^/]+)$};
            $app{$app} ||= [];
            my $conf = "$appfn/app.conf";
            my $derive = "$webdir/apps/$app.conf";
            push @weird, "Not present: Expected $derive, to be derived from $conf"
              unless -f $derive;
            push @weird, "Not present: Expected $conf in $appfn/"
              unless -f $conf;
            if (-f $conf && -f $derive && -M $derive > -M $conf) {
                push @weird, "Out of date: derived $derive is older than $conf";
            }
        } elsif ($appfn =~ m{~$}) {
            # ignore
        } else {
            push @weird, $appfn;
        }
    }

    if (keys %app) {
        push @out, qq{<h2> Apps present </h2>\n<dl>\n};
    } else {
        push @out, "No apps found";
    }
    foreach my $app (sort keys %app) {
        my @cfg = sort { length($a) <=> length($b) } @{ $app{$app} }; # APPORDER
        push @out, qq{  <dt><a href="/apps/$app">$app</a></dt><dd>\n};
        push @out, qq{  No configuration - will not be used\n} unless @cfg;
        foreach my $cfg (@cfg) {
            my $htxt = escapeHTML(read_file($cfg));
            push @out,
              (qq{  <p class=fn> $cfg </p>\n},
               qq{<pre class="conf">$htxt</pre> </li>\n});
        }
        push @out, qq{  </dd>\n};
    }
    push @out, qq{</dl>\n} if keys %app;

    push @out,
      (qq{<h2> Weirdness </h2>\n<ul class="weird">\n},
       (map {qq{<li> $_</li>\n}} @weird),
       qq{</ul>\n})
        if @weird;

    return (<<HDR, @out, <<FTR);
Content-type: text/html\n
<html><head>
 <title>Apps on $server</title>
</head><body>
<h1> Apps on $server under $webdir</h1>
HDR
</body></html>
FTR
}


sub read_dir {
    my ($fn) = @_;
    opendir my $dh, $fn or die "Can't opendir $fn: $!";
    my @leaf = grep { $_ !~ /^\.\.?$/ } readdir $dh;
    closedir $dh;
    return map {qq{$fn/$_}} @leaf;
}

sub read_file {
    my ($fn) = @_;
    open my $fh, '<', $fn or die "Can't read $fn: $!";
    local $/;
    return <$fh>;
}


exit main();
