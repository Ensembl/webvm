#! /usr/bin/perl
# Copyright [2018-2020] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use strict;
use warnings;
use CGI 'escapeHTML';
use CGI::Carp 'fatalsToBrowser';
use LWP;
use Date::Parse 'str2time';
use File::Find 'find';


sub main {
    print make_page();
    return 0;
}

sub get_restart_time {
    my $ua = LWP::UserAgent->new;
    $ua->timeout(5);

#    my $url = "http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/server-status";
    my $url = "http://localhost:$ENV{SERVER_PORT}/server-status";
    #
    # a) will be 404 unless mod_status enabled (DEVEL mode)
    # b) could block until _our_ caller times out (DEBUG mode)
    # c) Fetching SERVER_NAME:SERVER_PORT times out even in multi-work mode
    #
    # I suspect c) is because we connect in preference to the current
    # worker listening on our socket, rather than the parent process
    # which would issue the request to a new worker.
    #
    # Using localhost is a workaround for this.  Going via a proxy is
    # another solution.
    my $response = $ua->get($url);
    if ($response->is_success) {
        my $txt = $response->decoded_content;
        if (my ($restart) = $txt =~
            m{<dt>Restart Time: \S+, (\d+-\w+-\d+ [0-9:]{8} \w+)</dt>}) {
            return str2time($restart);
        } else {
            warn "No restart time in $url";
            return ();
        }
    } else {
        warn "$url fail:".$response->status_line.' (single-threaded in DEBUG mode?)';
        return ();
    }

    # Turns out the PidFile is touched on restart.  This would be
    # handy if we knew where it was (without cheating, which means
    # consulting /server-info (doh!) or parsing config).
}

sub newer_than {
    my ($M, @dir) = @_;

    my $seen = 0;
    my @keep;
    my $after = sub { # operating on name $_
        die "Too many files seen ($_)" if ++$seen > 1000; # arbitrary limit, emergency brake
        my ($type, $new) = ('', 0);
        if (-l) {
            $new = -M _ < $M || -C _ < $M;
            $type = ' -> '.readlink;
            stat;
        } elsif (-d _) {
            $type = '/';
        }
        $new ||= -M _ < $M || -C _ < $M;
        push @keep, $File::Find::name.$type if $new;
        return ();
    };
    find({ wanted => $after, follow => 0, no_chdir => 1 }, @dir);
    return @keep;
}


sub make_page {
    my @out;

    my $server = "$ENV{SERVER_NAME}:$ENV{SERVER_PORT}";
    my $restarted = get_restart_time();
    my $restartM = defined $restarted ? ($^T - $restarted)/86400 : undef;
    $server =~ s{(\.internal)?\.sanger\.ac\.uk}{};

    my $webdir = $ENV{DOCUMENT_ROOT};
    $webdir =~ s{/htdocs/?$}{};

    my @weird;
    my %app; # key = appname, value = \@cfgs
    foreach my $appfn (read_dir("$webdir/apps")) {
        if (-f $appfn && $appfn =~ m{/([^/]+)\.conf$}) {
            my $app = $1;
            push @{ $app{$app} }, $appfn;
            if (defined $restarted && (-M $appfn) < $restartM) {
                push @weird, "Restart needed: $appfn newer than httpd restart";
            }
        } elsif (-d $appfn) {
            my ($app) = $appfn =~ m{/([^/]+)$};
            $app{$app} ||= [];
            my $conf = "$appfn/app.conf";
            my $derive = "$webdir/apps/$app.conf";
            push @weird, "Not present: Expected $derive, to be derived from $conf"
              unless -f $derive;
            push @weird, "Not present: Expected $conf in $appfn/"
              unless -f $conf;
            if (-f $conf && -f $derive && -M $derive > -M $conf) {
                push @weird, "Out of date: derived $derive is older than $conf";
            }
        } elsif ($appfn =~ m{~$}) {
            # ignore
        } else {
            push @weird, $appfn;
        }
    }

    if (defined $restarted) {
        push @out, qq{<h2>Server (re)started</h2>\n}.localtime($restarted);
        my @newconf = newer_than($restartM, "$webdir/ServerRoot");
        push @weird, join '',
          ("Restart needed: ServerRoot files changed since server start <ul>",
           li(@newconf), '</ul>')
            if @newconf;
    } else {
        push @out, '(need <tt><a href="/server-status">/server-status</a></tt> to get restart time, use <tt>WEBDEFS=DEVEL</tt>)';
    }

    if (keys %app) {
        push @out, qq{<h2> Apps present </h2>\n<dl>\n};
    } else {
        push @out, "No apps found";
    }
    foreach my $app (sort keys %app) {
        my @cfg = sort { length($a) <=> length($b) } @{ $app{$app} }; # APPORDER
        push @out, qq{  <dt><a href="/apps/$app">$app</a></dt><dd>\n};
        push @out, qq{  No configuration - will not be used\n} unless @cfg;
        foreach my $cfg (@cfg) {
            my $htxt = escapeHTML(read_file($cfg));
            push @out,
              (qq{  <p class=fn> $cfg </p>\n},
               qq{<pre class="conf">$htxt</pre> </li>\n});
        }
        push @out, qq{  </dd>\n};
    }
    push @out, qq{</dl>\n} if keys %app;

    push @out,
      (qq{<h2> Weirdness </h2>\n<ul class="weird">\n}, li(@weird), qq{</ul>\n})
        if @weird;

    return (<<HDR, @out, <<FTR);
Content-type: text/html\n
<html><head>
 <title>Apps on $server</title>
</head><body>
<h1> Apps on <a href="/">$server</a> under $webdir</h1>
HDR
</body></html>
FTR
}


sub read_dir {
    my ($fn) = @_;
    opendir my $dh, $fn or die "Can't opendir $fn: $!";
    my @leaf = grep { $_ !~ /^\.\.?$/ } readdir $dh;
    closedir $dh;
    return map {qq{$fn/$_}} @leaf;
}

sub read_file {
    my ($fn) = @_;
    open my $fh, '<', $fn or die "Can't read $fn: $!";
    local $/;
    return <$fh>;
}

sub li {
    my @txt = @_;
    return map {qq{   <li>$_</li>\n}} @txt;
}


exit main();
