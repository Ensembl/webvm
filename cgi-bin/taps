#! /usr/bin/perl -T
use strict;
use warnings;

use CGI 'escapeHTML';
use URI;
use Try::Tiny;
use File::Find;

BEGIN { use lib ($ENV{OTTER_PERL_INC} || q{}) =~ m{([^:]+)}g }
use Otter::Paths;
use Otter::WebConfig qw( config_extract server_base_url );


=head1 NAME

taps (CGI) - pull all known server selftests into a browser

=head1 DESCRIPTION

Generates HTML containing marks suitable for
L<https://github.com/Anacode/HTtapTP>

It is not very useful unless the client-side part is present.

=head1 AUTHOR

mca@sanger.ac.uk

=cut


sub main {
    my $lib = 'HTtapTP-0.03';
# use Otter::Paths 'HTtapTP-0.03'; delayed to give prettier fail
    my $none = try { Otter::Paths->import($lib); "" } catch {"Failed: $_"};

    my $q = CGI->new;
    my @t = sort( find_t() );

    if ($none) {
        my $herr = escapeHTML($none);
        my @ht = map { escapeHTML($_) } @t;
        my @ht_li = map {qq{  <li><a href="$_">$_</a></li>\n}} @ht;

        print $q->header(-type=>'text/html', -status=>'412 Precondition Failed');
        print qq{<html> <head><title> Web server TAPs </title></head>
<body><h1> Web server TAPs </h1>
<p> Necessary client libraries for HTtapTP are not available </p>
<pre class="error">$herr</pre>
<h2> Diagnostics present </h2>
<ul>@ht_li</ul>
</body></html>\n};
    } else {
        my $doc = show_tests(@t);
        print $q->header(-type=>'text/html');
        print $doc;
    }

    return 0;
}


sub find_t {
    my $webdir = Otter::Paths->webdir;
    my @t;

    find({ wanted => sub { push @t, $_ if m{\.t$} && -f && -x },
           no_chdir => 1 },
         "$webdir/cgi-bin/selftest");

    foreach (@t) { s{^.*?(/cgi-bin/)}{$1} } # cook up absolute paths

    return @t;
}


sub show_tests {
    my @t = @_;

    # Places to find tests
    my $srv = try {
        config_extract();
    } catch {
        warn "No WebConfig here?  $_";
        [];
    };
    my %server = map {( $_->{hostname} => server_base_url($_) )} @$srv;
    $server{'(here)'} = server_base_url();

    my @th_server = map {
        my $hk = escapeHTML($_);
        my $hv = escapeHTML($server{$_});
        qq{<th scope="col"><a href="$hv">$hk</a></th>};
    } sort keys %server;
    my $n_srv = @th_server;
    unshift @th_server, qq{<td></td>};

    # Tests to find
    my @tr_tests;
    foreach my $t (@t) {
        my @td = map {
            my $uri = URI->new_abs($t, $server{$_});
            my $huri = escapeHTML($uri);
            qq{<td data-tap-src="$huri" title="$t on $_"></td>};
        } sort keys %server;
        my $short = $t;
        $short =~ s{^.*?selftest/}{};
        my $hshort = escapeHTML($short);
        unshift @td, qq{<th scope="row">$hshort</th>};
        push @tr_tests, qq{ <tr>@td</tr>\n};
    }

    # Cartesian product in 2D
    my $css = css_txt();
    return <<"DOC";
<html>
<head>
 <title> Web server TAPs </title>
 <script type="text/javascript" src="/HTtapTP/ext-js/require.js" data-main="/HTtapTP/js/main"></script>
 <style type="text/css">$css</style>
 <link rel="stylesheet" type="text/css" href="/HTtapTP/httaptp.css">
</head>
<body><h1> Web server TAPs </h1>
<table class="tests tap-compact">
 <col class="test" align="left"> <col span="$n_srv" class="server"> <!-- dnw? -->
 <tr>@th_server</tr>
@tr_tests
</table>

<p> Attempting to show all machines, but <ul>
 <li> not other users' sandboxes (not yet implemented) </li>
 <li> nor any machines not listed in the config file here (how to find them?) </li>
</ul> </p>

</body></html>
DOC
}

sub css_txt {
    return <<CSS;
  table.tests {
   border: thin black solid;
  }
  table.tests td {
    border: thin black solid;
  }
  th {
   font-family: monospace;
   font-weight: normal;
   padding: 0.5ex;
  }
CSS
}


exit main();
