#! /usr/bin/perl -T
use strict;
use warnings;

BEGIN { use lib ($ENV{OTTER_PERL_INC} || q{}) =~ m{([^:]+)}g }
use Otter::PerlVersion;

use CGI 'escapeHTML';
use JSON 'encode_json';
use URI;
use Try::Tiny;
use File::Find;
use Digest::SHA 'sha1_hex';

use Otter::WebNodes;
use Otter::Paths; # just for webdir


=head1 NAME

taps (CGI) - pull all known server selftests into a browser

=head1 DESCRIPTION

Generates HTML containing marks suitable for
L<https://github.com/Anacode/HTtapTP>

It is not very useful unless the client-side part is present.

=head1 AUTHOR

mca@sanger.ac.uk

=cut


sub main {
    my $none = do {
        my $webdir = Otter::Paths->webdir;
        my $fn = "$webdir/apps/HTtapTP/js/httaptp.js";
        -f $fn ? 0 : "File $fn is absent";
    };

    my $q = CGI->new;
    my @t = sort( find_t() );

    if ($none) {
        my $herr = escapeHTML($none);
        my @ht = map { escapeHTML($_) } @t;
        my @ht_li = map {qq{  <li><a href="$_">$_</a></li>\n}} @ht;

        print $q->header(-type=>'text/html', -status=>'412 Precondition Failed');
        print qq{<html> <head><title> Web server TAPs </title></head>
<body><h1> Web server TAPs </h1>
<p> Necessary client libraries for HTtapTP are not available </p>
<pre class="error">$herr</pre>
<h2> Diagnostics present </h2>
<ul>@ht_li</ul>
</body></html>\n};
    } else {
        my $doc = show_tests($q, @t);
        print $q->header(-type=>'text/html');
        print $doc;
    }

    return 0;
}


sub find_t {
    my $webdir = Otter::Paths->webdir;
    my @t;

    find({ wanted => sub { push @t, $_ if m{\.t$} && -f && -x },
           no_chdir => 1 },
         "$webdir/cgi-bin/selftest");

    foreach (@t) { s{^.*?(/cgi-bin/)}{$1} } # cook up absolute paths

    return @t;
}


sub show_tests {
    my ($q, @t) = @_;
    my @info; # notes for bottom of page

    # Places to find tests
    my @server; # list of [name, url]
    my $me_base = Otter::WebNodes->new_cgi->base_uri->as_string;
    if (my @srv = $q->param('server')) {
        # We will return a document listing these URLs given by the
        # caller.  Check that they look like server addresses, then
        # rely on CORS.
        foreach my $srv (@srv) {
            die "Cannot clean $srv" unless
              my ($sch, $h, $p) = $srv =~ m{^(https?://)?([-a-z0-9.]{1,300})(:\d{1,5})?/?$};
            $sch ||= 'http://';
            $p ||= '';
            push @server, [ $h, URI->new("$sch$h$p")->canonical->as_string ];
        }
        push @info, "Ignored svn config (if any) when choosing test servers";
    } else {
        # Ask the config in svn for a list of servers (default)
        try {
            @server = map
              {[ $_->display_name => $_->base_uri->as_string ]}
                Otter::WebNodes->listnew_fixed;
        } catch {
            warn "No WebConfig here?  $_";
            push @info, "Failed to read svn config: $_";
            @server = map
              {[ $_->display_name => $_->base_uri->as_string ]}
                Otter::WebNodes->new_cgi;
        };
    }

    my @th_server = map {
        my ($name, $url) = @$_;
        my $hk = escapeHTML($name);
        my $hv = escapeHTML($url);
        $hk =~ s{(\.|@)}{$1<wbr>}g; # optional HTML5 word breaks, for where text rotation doesn't work
        qq{<th scope="col"><a href="$hv">$hk</a></th>};
    } @server;
    unshift @th_server, qq{<td></td>};

    # Tests to find
    my @tr_tests;
    foreach my $t (@t) {
        my @td = map {
            my ($name, $base) = @$_;
            my $uri = URI->new_abs($t, $base);
            my $hname = escapeHTML($name);
            my $huri = escapeHTML($uri);
            my $id = substr(sha1_hex($uri), 0, 5);
            qq{<td data-tap-src="$huri" title="$t on $hname" id="$id"></td>};
        } @server;
        my $short = $t;
        $short =~ s{^.*?selftest/}{};
        my $hshort = escapeHTML($short);
        unshift @td, qq{<th scope="row">$hshort</th>};
        push @tr_tests, qq{ <tr>@td</tr>\n};
    }

    # Extra data to pass
    my %data = (timeout => 60_000);
    # Cookies: we need to give Otter Server tests something valid.
    # Might need to pass more later, but limit it for now.
    my @cookie = grep { $_ eq 'WTSISignOn' } $q->cookie;
    if (@cookie) {
        $data{cookie} = join '; ', map { "$_=".$q->cookie($_) } @cookie;
        push @info, "Got a useful-looking cookie to feed to Otter Server";
    } else {
        push @info, "I have no cookie to feed to Otter Server";
    }

    my $data = encode_json(\%data);
    my $hdata = escapeHTML($data);

    my @hinfo = map { my $h = escapeHTML($_); qq{  <li>$h</li>\n} } @info;
    my @col = (qq{  <col class="testname">\n},
               map { my $cls = $_->[1] eq $me_base
                       ? ' class="server-me"' : '';
                     qq{  <col$cls>\n} } @server);

    # Cartesian product in 2D
    my $css = css_txt();
    return <<"DOC";
<html>
<head>
 <title> Web server TAPs </title>
 <script type="text/javascript" src="/HTtapTP/ext-js/require.js" data-main="/HTtapTP/js/main"></script>
 <style type="text/css">$css</style>
 <link rel="stylesheet" type="text/css" href="/HTtapTP/httaptp.css">
</head>
<body>
 <div class="tap-compact tap-key">
   <p> Legend </p>
 </div>
 <h1> Web server TAPs </h1>
 <br clear="both" />

<table class="tests tap-compact" data-tap-data="$hdata">
 @col
 <tr class='server-name'>@th_server</tr>
@tr_tests
</table>

<p> Attempting to show all machines. </p>
<ul> @hinfo </ul>
<p> You can <a href="http://www.sanger.ac.uk/my_login.shtml">get a cookie</a> to feed to the Otter Servers.  Reload this page afterwards. </p>

</body></html>
DOC
}

sub css_txt {
    return <<CSS;
  table.tests {
   border: thin black solid;
  }
  table.tests td {
    border: thin black solid;
  }
  th {
   font-family: monospace;
   font-weight: normal;
   padding: 0.5ex;
   text-align: left;
  }
  .server-name th {
    text-align: center;
    writing-mode: tb-rl; /* http://www.thecssninja.com/css/real-text-rotation-with-css
      DNW in Firefox 24 */
  }
  .server-me {
    /* table col
     * http://quirksmode.org/css/css2/columns.html
     *   via http://stackoverflow.com/questions/157770/table-column-formatting
     */
    background: #b0d0ff;
    /* border: 3px grey solid; * DNW in FF 20*/
  }

  div.tap-key {
    margin: 0;
    padding: 0;
    float:right;
    font-size: 80%;
    border: thin grey solid;
    width: 20%;
  }
  div.tap-key p {
    margin: 0.25ex;
    font-weight: bold;
    text-align: center;
  }
  div.tap-key ol {
    padding: 0;
    margin: 0;
  }
  div.tap-key ol li {
    display: inline-block;
    padding: 0.1ex;
    margin: 0.2ex;
    width: 21%;
  }
  div.tap-key ol li span {
    font-size: 60%
  }
CSS
}


exit main();
